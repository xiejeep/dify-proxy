version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: dify-proxy-postgres
    environment:
      POSTGRES_DB: dify_proxy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dify-proxy-network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: dify-proxy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dify-proxy-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # 应用服务
  app:
    build: .
    container_name: dify-proxy-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/dify_proxy
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      DIFY_API_URL: https://api.dify.ai/v1
      DIFY_API_KEY: ${DIFY_API_KEY}
      RESEND_API_KEY: ${RESEND_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
    depends_on:
      - postgres
      - redis
    networks:
      - dify-proxy-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Caddy反向代理
  caddy:
    image: caddy:latest
    container_name: dify-proxy-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # For HTTP/3
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME} # 从 .env 文件或宿主环境读取
      - ADMIN_EMAIL=${ADMIN_EMAIL} # 从 .env 文件或宿主环境读取
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - app
    networks:
      - dify-proxy-network

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:

networks:
  dify-proxy-network:
    driver: bridge